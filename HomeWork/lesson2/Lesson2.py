"""
int целое число, неизменяемый
float дробное число, неизменяемый
bool логическое True or False, неизменяемый
None - ничто, неизменяемый
str - строки, неизменяемый
"""

"""Коллекции
list - список, изменяемый
tuple - кортеж, неизменяемый
set - множество, изменяемый
frozenset - множество, неизменяемый
dict - словарь, изменяемый
"""
#a, b, c, d = 1, 2, 3, 4
#some_list = [1, 2, 3, 'hello', 'world', True, False, None, 0, [1, 2, 3], a, b, c, d]
#может содержать любой изменяемый тип данных
#a = 257
#b = 257
#a is b
#False
#a == b
#True

#Обращение к строкам через индексы
#some_string = 'hello GB'
#len(some_string) !функция считает длинну строки
#8
#some_string[len(some_string) - 1]
#B
#some_string[0]
#'h'
#some_string[-2]
#'G'
#   колличество отрицательных индексов является длинне умноженной на минус единицу

"""
some_list.append(some_list)
some_list
[1, 2, 3, 'hello', 'world', True, False, None, 0, [1, 2, 3], [...]]
some_list is some_list[-1]
true
[1, 2, 3, 'hello', 'world', True, False, None, 0, [1, 2, 3]] - массив ссылок на объекты

some_list[0] = 'hello'
some_list
['hello', 2, 3, 'hello', 'world', True, False, None, 0, [1, 2, 3], [...]]

some_list[1] is some_list[-2][1] - единица указывает номер списка (их 2) - [...]
True

some_list.insert(2, 'GB')
some_list
['hello', 2, 'GB', 3, 'hello', 'world', True, False, None, 0, [1, 2, 3], [...]]
insert - вклинивает значение на нужное место двигая остальные элементы

СРЕЗЫ
some_string
'hello GB'
'G' in some_string
True
some_string[0:5] - 5й индекс не захватывается
Варианты - [:5],[3:] сначала или с конца
'hello'

СТЭП
some_string[0:5:2] - с начала до 5го элемента с шагом 2
идти с начала до конца some_string[::2]
some_string[::-1] - развернули строку в обратном направлении с определенным шагом

some_list[:] - от начала и до конца с сылкой вложения [...]
"""

#some_list.pop() - удаляет и возвращает удаленное значение в строке(показывает что удалено)
#['hello', 2, 'GB', 3, 'hello', 'world', True, False, None, 0, [1, 2, 3]]
#some_list
#['hello', 2, 'GB', 3, 'hello', 'world', True, False, None, 0, [1, 2, 3]]
#some_list.pop(0)
#'hello'
#some_list
#[2, 'GB', 3, 'hello', 'world', True, False, None, 0, [1, 2, 3]]
# .pop() -удаляет последнее значение из списка в т.ч. ссылку на копию списка [...]

"""
TUPLE - кортеж

some_tuple[-1].append("hello")
some_tuple
(1, 2, 3, 4, 5, [1, 2, 3, 'hello'])

SET - набор (множество)

Может в себе хранить только уникальные значения, уникальные объектты
some_set = {1, 2, 3, 4, 4, 3, 2, 1}
some_set
{1, 2, 3, 4}

Имеет метод .add
some_set.add((1, 2))
some_set
{1, 2, (1, 2), 3, 4} - появился кортеж в середине

some_set.add((1, 2, [1, 2])) - нельзя выполнить т.к. он не хэшируемый, хэш функция вычисляет уникальную сумму , набор байт для объекта
объект должен быть констатным, хэш сумму можно вычислить только из объектов которые являются неизменяемыми и содержат неизменяемые коллекции тд.

SET не гарантирует сохранение порядка, работает на собственных алгоритмах, к нему нельзя обращаться по индексам

Узнать пересечения:
some_set2 = {5, 6, 7, 8, 1}
some_set
{1, 2, (1, 2), 3, 4}
some_set & some_set2
{1}

Объеденение сет1 и сет2 уникальными значениями:
some_set | some_set2
{1, 2, (1, 2), 3, 4, 5, 6, 7, 8}

Узнать различия:
some_set.difference(some_set2) - элементы some_set которые не встречаются в some_set2
{3, 2, (1, 2), 4}

Одинаковые элементы:
some_set.intersection(some_set2)
{1}

FROZENSET - имеет всетеже функции что и SET но он неизменяем
frozenset((1, 2, 3, 4, 5))
frozenset({1, 2, 3, 4, 5})

a = [1]
type(a)
<class 'list'> - тип список
a = (1, )
type(a)
<class 'tuple'> - тип кортеж
a, b = (1, 2) - 
1
1
b
2

a = 1, 2, 3, 4, 5 - так же кортеж


DICT - словарь
структура ключ значения
some_dict = {'key_one':'Hello', 'Key2': 2222, 1:2344333}
обращение к данным происходит с использованием ключа

some_dict['key_one']
'Hello'
some_dict[1]
2344333
some_dict = {'key_one':'Hello', 'Key2': 2222, 1:2344333, False:84574759834}
some_dict[False]
84574759834

Ключи гарантируют сохранение последовательностей
Кключами могут быть хэшируемые и уникальные значения

s = (1, 2) - 1 это индентификатор товара , а 2 это индентификатор пользователя
some_dict[s] = 'hjmfbjfsbgvkjsdv'
some_dict
{'key_one': 'Hello', 'Key2': 2222, 1: 2344333, False: 84574759834, (1, 2): 'hjmfbjfsbgvkjsdv'}
some_dict[s]
'hjmfbjfsbgvkjsdv'
"""

template = {
    'name': 'Ваше имя\n>>>',
    'surname': 'Ваша фамилия\n>>>',
    'city': 'Город рождения\n>>>',
}

user = {}
for key, value in template.items():
    user[key] = input(value)

print(user)
#Список внутри из кортежей где ключ стоит на 0 месте а значение на 1, присвоение кортежа идет:
#name - key, Ваше имя - value, это свойтсво МНОЖЕСТВЕННОГО ПРИСВАИВАНИЯ a, b = (1, 2)
#что бв дополнить анкету нужно изменятьтолько template